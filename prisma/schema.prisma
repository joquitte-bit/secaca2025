// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ====================
// ENUMS - GECORRIGEERD
// ====================

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  LEARNER
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ModuleStatus {
  DRAFT
  Actief      // ← Kleine letters zoals in database
  Inactief    // ← Kleine letters zoals in database
}

enum Difficulty {
  Beginner    // ← Kleine letters zoals in database  
  Intermediate
  Expert
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  DOWNLOAD
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ====================
// MODELS - GECORRIGEERD
// ====================

model Organization {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  stripeCustomerId String?
  trialEndsAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  users           User[]
  courses         Course[]
  subscriptions   Subscription[]
  auditLogs       AuditLog[]
  reportSnapshots ReportSnapshot[]
  lessons         Lesson[]

  @@map("organizations")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(LEARNER)
  orgId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]
  quizAttempts QuizAttempt[]
  certificates Certificate[]
  auditLogs    AuditLog[]

  @@index([orgId, email])
  @@map("users")
}

model Subscription {
  id               String   @id @default(cuid())
  orgId            String
  stripeSubId      String   @unique
  plan             String // 'starter', 'standard', 'plus'
  status           String // 'active', 'canceled', 'past_due', 'trialing'
  seats            Int
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("subscriptions")
}

model Course {
  id          String       @id @default(cuid())
  orgId       String
  title       String
  slug        String
  description String?
  summary     String?
  level       String?
  tags        String?
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  modules      CourseOnModule[]  // ✅ Many-to-many via junction table
  enrollments  Enrollment[]
  certificates Certificate[]

  @@unique([orgId, slug])
  @@index([orgId, status])
  @@map("courses")
}

model Module {
  id          String        @id @default(cuid())
  title       String
  description String?
  order       Int           @default(0)
  
  // ✅ TIJDELIJK: Strings i.p.v. enums voor fix
  category    String?       @default("Uncategorized")
  status      String?       @default("DRAFT")
  duration    Int?          @default(0)
  difficulty  String?       @default("BEGINNER")
  tags        String?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  lessons LessonOnModule[]
  courses CourseOnModule[]

  @@map("modules")
}

model Lesson {
  id              String       @id @default(cuid())
  orgId           String? // Voor organization-specific lessons
  title           String
  description     String?
  type            LessonType
  content         String? // JSON string voor structured content
  order           Int          @default(0)
  durationMinutes Int?
  status          LessonStatus @default(DRAFT)
  difficulty      String? // 'beginner', 'intermediate', 'expert'
  tags            String? // JSON string voor tags array
  category        String? // Voor filtering
  videoUrl        String? // Voor video lessons
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  organization    Organization?  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  quizQuestions   QuizQuestion[]
  quizAttempts    QuizAttempt[]
  modules         LessonOnModule[]  // ✅ Many-to-many via junction table

  @@index([orgId])
  @@map("lessons")
}

// ✅ NIEUW: Junction table voor many-to-many tussen courses en modules
model CourseOnModule {
  id        String   @id @default(cuid())
  courseId  String
  moduleId  String
  order     Int      @default(0) // Volgorde binnen de course
  
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([courseId, moduleId])  // Voorkom dubbele koppelingen
  @@map("course_on_module")
}

// ✅ BESTAAND: Junction table voor many-to-many tussen lessons en modules
model LessonOnModule {
  id        String   @id @default(cuid())
  moduleId  String
  lessonId  String
  order     Int      @default(0) // Volgorde binnen de module
  
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([moduleId, lessonId])  // Voorkom dubbele koppelingen
  @@map("lesson_on_module")
}

model QuizQuestion {
  id           String  @id @default(cuid())
  lessonId     String
  prompt       String
  answers      String // JSON string: string[]
  correctIndex Int
  explanation  String?
  order        Int     @default(0)

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId, order])
  @@map("quiz_questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  score     Int // Percentage 0-100
  passed    Boolean
  answers   String // JSON string: user's antwoorden
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@index([createdAt])
  @@map("quiz_attempts")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  progress    Int       @default(0) // 0-100 percentage

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model Certificate {
  id       String   @id @default(cuid())
  userId   String
  courseId String
  issuedAt DateTime @default(now())
  url      String? // PDF download URL

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("certificates")
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  action    String // 'CREATE', 'UPDATE', 'DELETE'
  entity    String // 'COURSE', 'USER', 'MODULE', 'LESSON'
  entityId  String?
  meta      String? // JSON string: additional data
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model ReportSnapshot {
  id        String   @id @default(cuid())
  orgId     String
  json      String // JSON string van rapport data
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([createdAt])
  @@map("report_snapshots")
}