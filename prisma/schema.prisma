// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum UserRole {
  ADMIN
  LEARNER
  INSTRUCTOR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ModuleStatus {
  DRAFT
  ACTIEF
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  DOWNLOAD
}


// Models
model Organization {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  stripeCustomerId String?
  trialEndsAt      DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  auditLogs        AuditLog[]
  courses          Course[]
  lessons          Lesson[]
  reportSnapshots  ReportSnapshot[]
  subscriptions    Subscription[]
  users            User[]
  modules          Module[]         // ← VOEG DIT TOE voor de relation

  @@map("organizations")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  image        String?
  role         UserRole      @default(LEARNER)
  orgId        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auditLogs    AuditLog[]
  certificates Certificate[]
  enrollments  Enrollment[]
  quizAttempts QuizAttempt[]
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  lessonProgress UserLessonProgress[]

  @@index([orgId, email])
  @@map("users")
}

model Subscription {
  id               String       @id @default(cuid())
  orgId            String
  stripeSubId      String       @unique
  plan             String
  status           String
  seats            Int
  currentPeriodEnd DateTime
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  organization     Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("subscriptions")
}

model Course {
  id                 String           @id @default(cuid())
  title              String
  description        String
  status             CourseStatus     @default(DRAFT)
  level              String           @default("Introductie")
  tags               String?          @default("[]")
  slug               String           @unique
  order              Int?             @default(0)
  duration           Int?             @default(0)
  difficulty         String?          @default("Beginner")
  category           String?          @default("Uncategorized")
  moduleCount        Int?             @default(0)
  enrollmentCount    Int?             @default(0)
  certificateCount   Int?             @default(0)
  completionRate     Float?           @default(0)
  orgId              String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  courseCertificates Certificate[]
  courseModules      CourseOnModule[]
  organization       Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  courseEnrollments  Enrollment[]

  @@unique([orgId, slug])
  @@index([orgId, status])
  @@map("courses")
}

model Module {
  id             String           @id @default(cuid())
  title          String
  description    String
  status         ModuleStatus?    @default(DRAFT)  // ← VERANDER NAAR DRAFT
  category       String?
  difficulty     String?          @default("Beginner")
  duration       Int?
  order          Int
  courseCount    Int?
  completionRate Int?
  tags           String?
  content        String?
  objectives     String?
  prerequisites  String?
  slug           String?          @unique
  videoUrl       String?

  orgId          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courseModules  CourseOnModule[]
  lessonModules  LessonOnModule[]
  organization   Organization?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("modules")
}

model Lesson {
  id               String    @id @default(cuid())
  orgId            String?
  title            String
  description      String
    type            String   // VIDEO, QUIZ, TEXT, DOWNLOAD
  content          String?
  order            Int       @default(0)
  durationMinutes  Int?
  status          String   // DRAFT, PUBLISHED, ARCHIVED
  difficulty      String?  // beginner, intermediate, expert
   tags            String?  // JSON string
  category         String?
  videoUrl         String?
  level            String?          @default("Introductie")
  slug             String?          @unique
  duration         Int?             @default(0)
  moduleCount      Int?             @default(0)
  enrollmentCount  Int?             @default(0)
  certificateCount Int?             @default(0)
  completionRate   Float?           @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lessonModules    LessonOnModule[]
  organization     Organization?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  quizAttempts     QuizAttempt[]
  quizQuestions    QuizQuestion[]
  userProgress     UserLessonProgress[]

  @@index([orgId])
  @@map("lessons")
}

model UserLessonProgress {
  id               String   @id @default(cuid())
  userId           String
  lessonId         String
  completed        Boolean  @default(false)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaties
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_lesson_progress")
}

model CourseOnModule {
  id       String @id @default(cuid())
  courseId String
  moduleId String
  order    Int    @default(0)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, moduleId])
  @@map("course_on_module")
}

model LessonOnModule {
  id       String @id @default(cuid())
  moduleId String
  lessonId String
  order    Int    @default(0)
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, lessonId])
  @@map("lesson_on_module")
}

model QuizQuestion {
  id           String  @id @default(cuid())
  lessonId     String
  prompt       String
  answers      String  // JSON string van antwoorden
  correctIndex Int     // Index van correct antwoord (0-based)
  explanation  String? // Uitleg waarom dit antwoord correct is
  order        Int     @default(0)
  lesson       Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId, order])
  @@map("quiz_questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  score     Int      // Aantal correcte antwoorden
  passed    Boolean  // Of de gebruiker geslaagd is
  answers   String   // JSON string van gegeven antwoorden
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
  @@index([createdAt])
  @@map("quiz_attempts")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  progress    Int       @default(0)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model Certificate {
  id       String   @id @default(cuid())
  userId   String
  courseId String
  issuedAt DateTime @default(now())
  url      String?
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("certificates")
}

model AuditLog {
  id           String       @id @default(cuid())
  orgId        String
  userId       String
  action       String
  entity       String
  entityId     String?
  meta         String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model ReportSnapshot {
  id           String       @id @default(cuid())
  orgId        String
  json         String
  createdAt    DateTime     @default(now())
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([createdAt])
  @@map("report_snapshots")
}