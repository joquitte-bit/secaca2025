// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ====================
// ENUMS
// ====================

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  LEARNER
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  DOWNLOAD
}

// ====================
// MODELS
// ====================

model Organization {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  stripeCustomerId String?
  trialEndsAt      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  users           User[]
  courses         Course[]
  subscriptions   Subscription[]
  auditLogs       AuditLog[]
  reportSnapshots ReportSnapshot[]

  @@map("organizations")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(LEARNER)
  orgId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  enrollments    Enrollment[]
  quizAttempts   QuizAttempt[]
  certificates   Certificate[]
  auditLogs      AuditLog[]

  @@map("users")
  @@index([orgId, email])
}

model Subscription {
  id               String   @id @default(cuid())
  orgId            String
  stripeSubId      String   @unique
  plan             String   // 'starter', 'standard', 'plus'
  status           String   // 'active', 'canceled', 'past_due', 'trialing'
  seats            Int
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
  @@index([orgId])
}

model Course {
  id          String       @id @default(cuid())
  orgId       String
  title       String
  slug        String
  description String?
  summary     String?
  level       String?      // 'beginner', 'intermediate', 'advanced'
  tags        String?      // JSON string voor SQLite compatibiliteit
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  modules      Module[]
  enrollments  Enrollment[]
  certificates Certificate[]

  @@map("courses")
  @@unique([orgId, slug])
  @@index([orgId, status])
}

model Module {
  id       String @id @default(cuid())
  courseId String
  title    String
  order    Int    @default(0)

  // Relations
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
  @@index([courseId, order])
}

model Lesson {
  id             String     @id @default(cuid())
  moduleId       String
  title          String
  type           LessonType
  content        String?    // JSON string voor structured content
  order          Int        @default(0)
  durationMinutes Int?      // Geschatte duur in minuten
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  module       Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quizQuestions QuizQuestion[]
  quizAttempts  QuizAttempt[]

  @@map("lessons")
  @@index([moduleId, order])
}

model QuizQuestion {
  id          String @id @default(cuid())
  lessonId    String
  prompt      String
  answers     String // JSON string: string[]
  correctIndex Int
  explanation String?
  order       Int    @default(0)

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
  @@index([lessonId, order])
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  score     Int      // Percentage 0-100
  passed    Boolean
  answers   String   // JSON string: user's antwoorden
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
  @@index([userId])
  @@index([lessonId])
  @@index([createdAt])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  startedAt  DateTime @default(now())
  completedAt DateTime?
  progress   Int      @default(0) // 0-100 percentage

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("enrollments")
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Certificate {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  issuedAt  DateTime @default(now())
  url       String?  // PDF download URL

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("certificates")
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  action    String   // 'CREATE', 'UPDATE', 'DELETE'
  entity    String   // 'COURSE', 'USER', 'MODULE', 'LESSON'
  entityId  String?
  meta      String?  // JSON string: additional data
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
  @@index([orgId])
  @@index([userId])
  @@index([createdAt])
}

model ReportSnapshot {
  id        String   @id @default(cuid())
  orgId     String
  json      String   // JSON string van rapport data
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("report_snapshots")
  @@index([orgId])
  @@index([createdAt])
}